parameters:
  name: 'SeleniumTestability'
  vmImage: ''
  robotPrefix: ''

jobs:
- job: ${{Â parameters.name }}
  timeoutInMinutes: ${{ parameters.timeout }}
  pool:
    vmImage: ${{ parameters.vmImage }}
  strategy:
    matrix:
      Python36:
        os_name:  ${{ parameters.name }}
        coverage:  ${{ parameters.coverage}}
        python_version: '3.6'
        outputdir: testresults
        geckodriver: ${{ parameters.geckodriver }}
        chromedriver: ${{ parameters.chromedriver}}
      Python37:
        os_name:  ${{ parameters.name }}
        coverage:  ${{ parameters.coverage}}
        python_version: '3.7'
        outputdir: testresults
        geckodriver: ${{ parameters.geckodriver }}
        chromedriver: ${{ parameters.chromedriver}}
      Python38:
        os_name:  ${{ parameters.name }}
        coverage:  ${{ parameters.coverage}}
        python_version: '3.8'
        outputdir: testresults
        geckodriver: ${{ parameters.geckodriver }}
        chromedriver: ${{ parameters.chromedriver}}
      Python39:
        os_name:  ${{ parameters.name }}
        coverage:  ${{ parameters.coverage}}
        python_version: '3.9'
        outputdir: testresults
        geckodriver: ${{ parameters.geckodriver }}
        chromedriver: ${{ parameters.chromedriver}}
    maxParallel: 6

  steps:
  - task: NodeTool@0
    inputs:
      versionSpec: '12.13.0'

  - bash: |
      status=$("$(coverage)" == "true" && echo "--coverage" || echo "")
      echo "Enabling Coverage: $status"
      echo "##vso[task.setvariable variable=ENABLE_COVERAGE]$status"
    displayName: 'Setting build variables'

  - task: UsePythonVersion@0
    displayName: 'Python for test execution'
    inputs:
      versionSpec: $(python_version)
      addToPath: true
      architecture: 'x64'

  - script: |
      python -m pip install --upgrade pip wheel setuptools
      python -m pip install -r requirements-dev.txt
    displayName: 'Install requirements'

  - bash: |
      inv webdrivers --chromedriver=$(chromedriver) --geckodriver=$(geckodriver)
    displayName: Webdrivers

  - bash: |
      brew update
      brew install --cask firefox google-chrome
    condition: eq( variables['Agent.OS'], 'Darwin' )
    displayName: Install Latest Browsers on OSX

  - bash: |
      sudo apt-get update --yes
      sudo apt-get install firefox google-chrome-stable --yes
    condition: eq( variables['Agent.OS'], 'Linux' )
    displayName: Install Latest Browsers on Linux

  - bash: |
      npm install
      npm run build
    displayName: 'Generate javascript'
    continueOnError: false

  - bash: |
      ${{ parameters.robotPrefix }} inv test $(ENABLE_COVERAGE) --skipci --outputdir $(outputdir) --xunit acceptance_tests.xml
    displayName: 'Running Acceptance Test'
    continueOnError: false

  - bash: |
      inv cobertura --outputfile $(outputdir)/$(python_version)-$(os_name)-coverage.xml
    displayName: 'Generating Coverage data'
    condition: eq(variables['coverage'], 'true')
    continueOnError: false

  - task: PublishTestResults@2
    condition: succeededOrFailed()
    inputs:
      testRunner: JUnit
      testResultsFiles: $(outputdir)/acceptance_tests.xml
      testResultsTitle: Acceptance Tests for $(python_version) on $(os_name)
      testRunTitle: seleniumtestability-$(python_version)-$(os_name)-acceptance

  - task: PublishCodeCoverageResults@1
    condition: and(succeededOrFailed(), eq(variables['coverage'], 'true'))
    inputs:
      codeCoverageTool: 'cobertura'
      summaryFileLocation: $(outputdir)/$(python_version)-$(os_name)-coverage.xml
      failIfCoverageEmpty: false

# DOES NOT MOSTLY WORK IN WINDOWS FOR REASON OR THE OTHER WTF?
# running tests leaves process running and stuff in outputdir are still locked due to that ..
  - task: PublishBuildArtifacts@1
    condition: always()
    displayName: Publish Robot Framework logs and results
    inputs:
      PathtoPublish: $(outputdir)
      Parallelcopy: true
      Parallelcount: 8
      ArtifactType: container
      TargetPath: ""
      ArtifactName: ${{ parameters.name }}-$(python_version)-$(os_name)-logs
